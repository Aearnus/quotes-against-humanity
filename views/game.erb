<html>
	<head>
		<title>
			Quotes Against Humanity
		</title>
		<link rel="stylesheet" type="text/css" href="game.css">
		<link rel="shortcut icon" href="/favicon.gif"/>
		<script type="text/javascript">
		//--------HELPER FUNCTIONS--------
		function errorDialog(problem) {
			alert("Something has gone terribly wrong! Please refresh the page. Report this to the developer: " + problem);
		}
		function cardFromId(id) {
			var tempCard = cards[id];
			if (tempCard["id"] != id) {
				errorDialog("cardFromIdMismatch");
			}
			return tempCard;
		}
		function blackCardFromId(id) {
			var tempCard = blackCards[id];
			if (tempCard["id"] != id) {
				errorDialog("blackCardFromIdMismatch");
			}
			return tempCard;
		}

		//--------RANDOM RENDERING FUNCTIONS--------
		function displayTimer(time) {
			document.getElementById("countdownTimer").innerHTML = time;
		}
		function displayScene(scene) {
			document.getElementById("sceneCounter").innerHTML = (scene == 0 ? "Play a card!" : "The Card Chooser is choosing.");
		}
		function displayPlayers(playerList, cardChooser) {
			document.getElementById("playerList").innerHTML = "";
			for (var i = 0; i < playerList.length; i++) {
				var playerContainer = document.createElement("span");
				playerContainer.className = "playerContainer";
				var playerElement = document.createElement("div");
				playerElement.id = "name-" + playerList[i]["nick"];
				playerElement.setAttribute("name", playerList[i]["nick"]);
				if (playerList[i]["is_card_chooser"] == true) {
					playerElement.innerHTML = playerList[i]["nick"] + " (card chooser)";
				} else {
					playerElement.innerHTML = playerList[i]["nick"];
				}
				playerContainer.appendChild(playerElement);
				var scoreElement = document.createElement("div");
				scoreElement.id = "score-" + playerList[i]["nick"];
				scoreElement.setAttribute("name", playerList[i]["nick"]);
				scoreElement.innerHTML = "Score: " + playerList[i]["points"];
				playerContainer.appendChild(scoreElement)
				document.getElementById("playerList").appendChild(playerContainer);
			}
		}
		function displayPlacedCards(cardArray, winningCard, players) {
			document.getElementById("cardsInPlay").innerHTML = "";
			for (var i = 0; i < cardArray.length; i++) {
				var cardHolder = document.createElement("div");
				cardHolder.className = "cardGroup";
				cardHolder.setAttribute("name", i);
				if (winningCard == -1) {
					if (amCardChooser) {
						cardHolder.addEventListener("click", function(event) 
							{ 
								var currentElement = this;
								console.log("sending " + JSON.stringify({type: "chooseCard", data: Number.parseInt(currentElement.getAttribute("name"))}));
								gameSocket.send(JSON.stringify({type: "chooseCard", data: Number.parseInt(currentElement.getAttribute("name"))}));
							});
					} 
				} else {
					var cardPlacer = document.createElement("div");
					cardPlacer.innerHTML = " -" + players[cardArray[i]["player"]]["nick"];
					cardHolder.appendChild(cardPlacer);
					if (i == winningCard) {
						cardHolder.style.background = "rgb(255,255,0)";
					}
				}
				for (var j = 0; j < cardArray[i]["card"].length; j++) {
					var currentCard = cardArray[i]["card"][j];
					var currentCardHolder = document.createElement("div");
					currentCardHolder.className = "card";
					var cardAuthor = document.createElement("div");
					for (var authorI = 0; authorI < cardFromId(currentCard)["authors"].length; authorI++) {
						cardAuthor.innerHTML += cardFromId(currentCard)["authors"][authorI] + "<br>";
					}
					cardAuthor.className = "cardAuthor";
					currentCardHolder.appendChild(cardAuthor);
					var cardQuote = document.createElement("div");
					cardQuote.id = "placed-card-" + currentCard;
					cardQuote.innerHTML = cardFromId(currentCard)["quote"];
					cardQuote.className = "cardQuote";
					currentCardHolder.appendChild(cardQuote);
					cardHolder.appendChild(currentCardHolder);
				}

				document.getElementById("cardsInPlay").appendChild(cardHolder);
			}
		}
		function displayBlackCard(card) {
			document.getElementById("blackCard").innerHTML = blackCardFromId(card)["quote"];
		}
		function displayIsCardChooser(isCardChooser) {
			if (isCardChooser) {
				document.getElementById("isCardChooser").style.display = "block";
				amCardChooser = true;
			} else {
				document.getElementById("isCardChooser").style.display = "none";
				amCardChooser = false;
			}
		}


		//--------INVENTORY FUNCTIONS--------
		function displayInventory(inventoryArray, canPlaceCards) {
			var howManyCards = blackCardFromId(currentBlackCard)["cardAmount"];
			document.getElementById("cardInventory").innerHTML = "";
			for (var i = 0; i < inventoryArray.length; i++) {
				var cardElement = document.createElement("div");
				cardElement.id = "card-" + inventoryArray[i];
				cardElement.setAttribute("name", inventoryArray[i]);
				cardElement.className = "card";
				console.log("selectedCardIndexes: " + selectedCardIndexes);
				if (selectedCardIndexes.indexOf(i) != -1) {
					cardElement.className += " selectedCard";
				}
				var cardQuote = document.createElement("div");
				cardQuote.innerHTML = cardFromId(inventoryArray[i])["quote"];
				cardQuote.className = "cardQuote";
				cardElement.appendChild(cardQuote);
				var cardAuthor = document.createElement("div");
				for (var authorI = 0; authorI < cardFromId(inventoryArray[i])["authors"].length; authorI++) {
					cardAuthor.innerHTML += cardFromId(inventoryArray[i])["authors"][authorI] + "<br>";
				}
				cardAuthor.className = "cardAuthor";
				cardElement.appendChild(cardAuthor);
				if (canPlaceCards) {
					console.log("this black card wants " + howManyCards);
					if (howManyCards == 1) {
						console.log("and its getting one, what a bitch");
						document.getElementById("placeNCards").style.cssText = "display:none;";
						cardElement.addEventListener("click", function(event) 
						{ 
							var currentElement = this;
							gameSocket.send(JSON.stringify({type: 'playCard', data: [Number.parseInt(currentElement.getAttribute("name"))]}));
						});
					} else if (howManyCards > 1) {
						console.log("and its getting more than one");
						document.getElementById("placeNCards").style.cssText = "display:block;";
						document.getElementById("placeNCards").innerHTML = "Place down " + howManyCards + " cards.";
						cardElement.addEventListener("click", function(event) 
						{ 
							var currentElement = this;
							if (selected.indexOf(Number.parseInt(currentElement.getAttribute("name"))) == -1) {
								selected.push(Number.parseInt(currentElement.getAttribute("name")));
								selectedCardIndexes.push(i);
								currentElement.className += " selectedCard";
								if (selected.length == howManyCards) {
									gameSocket.send(JSON.stringify({type: 'playCard', data: selected}));
									selected = [];
									selectedCardIndexes = [];
								}
							}
						});
					}
				} else {
					cardElement.style.cssText = "color: grey;";
					selected = [];
					selectedCardIndexes = [];
				}
				document.getElementById("cardInventory").appendChild(cardElement);
			}
		}

		//--------SOCKET FUNCTIONS--------
		function parseSocketMessage(e) {
			console.log(e.data);
			var message = JSON.parse(e.data);
			switch (message["type"]) {
				case "inventory": //updates client inventory
					displayInventory(message["data"]["inventory"], message["data"]["can_place_cards"]);
					displayIsCardChooser(message["data"]["is_card_chooser"])
					break;
				case "gameState": //everything that isn't your inventory
					displayTimer(message["data"]["timer"]);
					displayScene(message["data"]["currentScene"]);
					displayPlacedCards(message["data"]["placedCards"], message["data"]["chosenCard"], message["data"]["players"]);
					displayPlayers(message["data"]["players"], message["data"]["cardChooser"]);
					currentBlackCard = message["data"]["blackCard"];
					displayBlackCard(message["data"]["blackCard"]);
					break;
			}
		}
		function sockMe() {
			gameSocket = new WebSocket("ws://72.208.39.174:12975/");
			gameSocket.onopen = function () {
				console.log("connected to server");
			}
			gameSocket.onclose = function () {
				errorDialog("socketClosed");
			}
			gameSocket.onerror = function () {
				errorDialog("socketError");
			}
			gameSocket.onmessage = parseSocketMessage;
		}

		//--------INIT FUNCTION--------
		function init() {
			sockMe();
			cards = <%= $CARDS %>
			blackCards = <%= $BLACK_CARDS %>
			amCardChooser = false;
			currentBlackCard = 0;
			selected = [];
			selectedCardIndexes = [];
		}

		window.onload = init;
		</script>
	</head>
	<body>
		<h1>Quotes Against Humanity</h1>
		<p class="timer">Countdown timer:
			<p id="countdownTimer" class="timerNumber"></p>
		</p>
		<h3 id="sceneCounter"></h3>
		<h2>Players:</h2>
		<p id="playerList"></p>
		<h2>Cards in play:</h2>
		<h3 id="isCardChooser" style="display:none;background:rgb(200,200,200)">You are the card chooser! Click a card to choose it as the best one.</h3>
		<p id="blackCard" class="blackCard"></p>
		<div id="cardsInPlay"></div>
		<h3>Your cards:
			<p id="placeNCards" style="display:none;">Place down 2 cards.</p>
		</h3>
		<p id="cardInventory"></p>
	</body>
</html>